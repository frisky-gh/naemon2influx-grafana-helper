#!/usr/bin/perl

use English;
use IO::Handle;
use URI::Escape;
use URI::Query;
use HTTP::Daemon;
use HTTP::Status;
use LWP::UserAgent;
use JSON;
use Template;
use strict;

our $NAME         = 'naemon2influx-grafana-helper';
our $NAEMON2INFLUX_CFG = '/etc/naemon/naemon2influx.cfg';
our $HELPER_CONF  = '/etc/naemon/naemon2influx-grafana-helper.conf';
our $HELPER_RULES = '/etc/naemon/naemon2influx-grafana-helper.rules';
our $TEMPLATEDIR  = '/etc/naemon/naemon2influx-grafana-helper.d';
our $CACHEDIR     = '/var/cache/naemon';
our $LOGFILE      = '/var/log/naemon/naemon2influx-grafana-helper.log';

####
our $LOGFH;
if( open $LOGFH, '>>', $LOGFILE ){ $LOGFH->autoflush; }
else{ $LOGFH = *STDERR; }
our $DEBUG = 0;

sub debuglog ($;@) {
	return unless $DEBUG;
	my ($format, @args) = @_;
	my ($sec,$min,$hour,$day,$mon,$year) = localtime time;
	my $t = sprintf '%04d-%02d-%02d_%02d:%02d:%02d', $year+1900, $mon+1, $day, $hour, $min, $sec;
	printf $LOGFH "$t $format\n", @args;
}

sub accesslog ($;@) {
	my ($format, @args) = @_;
	my ($sec,$min,$hour,$day,$mon,$year) = localtime time;
	my $t = sprintf '%04d-%02d-%02d_%02d:%02d:%02d', $year+1900, $mon+1, $day, $hour, $min, $sec;
	printf $LOGFH "$t $format\n", @args;
}

sub var2ltsv ( \% ){
	my ($var) = @_;
	my @ltsv;
	push @ltsv, "host_service:".$var->{host_service} if defined $var->{host_service};
	foreach my $k ( sort {$a cmp $b} keys %$var ){
		next if $k eq 'host_service';
                push @ltsv, "$k:".$var->{$k};
	}
	return join "\t", @ltsv;
}

sub ltsv2var ( $ ){
	my ($ltsv) = @_;
	my %var;
	foreach my $kv ( split m"\t", $ltsv ){
		$kv =~ m"^([-./\[\]\w]+):(.*)$" or do {
			next;
		};
		my $k = $1;
		my $v = $2;
		$var{$k} = $v;
	}
	return %var;
}

####
sub read_naemon2influx_cfg () {
	my $filename = $NAEMON2INFLUX_CFG;
	my %config;

	$config{'debug'} = 0;
	$config{'timefactor'} = 9;
	$config{'timereplacement'} = "Time";
	$config{'separator'} = "";
	$config{'global_prefix'} = "";
	$config{'output'} = "http://localhost:8083";

	open my $h, '<', $filename or do {
		die "cannot open $filename: $OS_ERROR, stopped";
		last;
	};
	while (<$h>) {
		next if m"^\s*#";			# skip commented lines
		s/^\s+//;				# removes leading whitespace
		m/^([^=]+)\s*=\s*(.*)$/x and do {	# splits into key=val pairs
			my $key = $1;
			my $val = $2;
			$key =~ s/\s+$//;		# removes trailing whitespace
			$val =~ s/\s+$//;		# removes trailing whitespace
			$config{$key} = $val;
		};
	}
	close $h or do {
		die "close failed for $filename: $OS_ERROR, stopped";
	};
	return \%config;
}

sub read_helper_conf () {
	my $filename = $HELPER_CONF;
	my %conf = (
		'LISTENADDR' => 'localhost',
		'LISTENPORT' => 46849,
		'HELPERURL' => 'http://localhost:46849/',
		'GRAFANADATASOURCE' => 'influxdb',
		'GRAFANAURL'        => 'http://localhost/',
		'GRAFANAAPIKEY'     => 'AAAAAA',
		'GRAFANAORGID'      => 'undef',
		'DEBUG' => 0,
	);

	open my $h, '<', $filename or do {
		die "cannot open $filename: $OS_ERROR, stopped";
	};
	while (<$h>) {
		next if m"^\s*(#|$)";
		die "$filename:$.: illegal format, stopped" unless m"^(\w+)=(.*)$";
		$conf{$1} = $2;
	}
	close $h or do {
		die "close failed for $filename: $OS_ERROR, stopped";
	};
	return \%conf;
}

sub read_helper_rules () {
	my $filename = $HELPER_RULES;
	my @rules;

	open my $h, '<', $filename or do {
		die "cannot open $filename: $OS_ERROR, stopped";
	};
	while (<$h>) {
		next if m"^\s*(#|$)";
		die "$filename:$.: illegal format, stopped" unless m"^(\S+)\s+(\S+)\s+(\S+)(?:\s+(\S+)(?:\s+(\w+=\S*(?:\s+\w+=\S*)*))?)?\s*$";
		my $series_re = qr"^$1$";
		my $field_re = qr"^$2$";
		my $template = $3;
		my $graphid = $4;
		my $graphparams = $5;
		push @rules, [$series_re, $field_re, $template, $graphid, $graphparams];
	}
	close $h or do {
		die "close failed for $filename: $OS_ERROR, stopped";
	};
	return \@rules;
}

sub read_template ($) {
	my ($templatename) = @_;
	my $filename = "$TEMPLATEDIR/$templatename.tt";
	open my $h, '<', "$filename" or do {
		debuglog "cannot open %s: %s", $filename, $OS_ERROR;
		return undef;
	};
	my $text = join '', <$h>;
	close $h or do {
		debuglog "close failed for %s: %s", $filename, $OS_ERROR;
		return undef;
	};
	return $text;
}

sub write_js ($$) {
	my ($jsname, $content) = @_;
	my $filename = "$CACHEDIR/$jsname.js";
	open my $h, '>', "$filename" or do {
		die "cannot open $filename: $OS_ERROR, stopped";
	};
	print $h $content;
	close $h or do {
		die "close failed for $filename: $OS_ERROR, stopped";
	};
	return;
}

sub read_urlmap () {
	my %map;
	my $filename = "$CACHEDIR/naemon2influx-grafana-helper.urlmap";
	open my $h, '<', "$filename" or do {
		#die "cannot open $filename: $OS_ERROR, stopped";
		return ();
	};
	while( <$h> ){
		chomp;
		my $var = decode_json $_;
		my $host_service = $var->{host_service};
		$map{$host_service} = $var;
	}
	close $h or do {
		die "close failed for $filename: $OS_ERROR, stopped";
	};
	return %map;
}

sub search_urlmap ($$) {
	my ($host, $service) = @_;

	my $filename = "$CACHEDIR/naemon2influx-grafana-helper.urlmap";
	open my $h, '<', "$filename" or do {
		#die "cannot open $filename: $OS_ERROR, stopped";
		return undef, undef, undef;
	};
	my $r;
	while( <$h> ){
		chomp;
		my $var = decode_json $_;
		my $host_service = $var->{host_service};
		next unless "$host,$service" eq $host_service;
		$r = $var;
		last;
	}
	close $h or do {
		die "close failed for $filename: $OS_ERROR, stopped";
	};
	return $r;
}

sub write_urlmap (\%) {
	my ($map) = @_;
	my $filename = "$CACHEDIR/naemon2influx-grafana-helper.urlmap";
	my $enc = JSON->new->utf8->canonical;
	open my $h, '>', "$filename" or do {
		die "cannot open $filename: $OS_ERROR, stopped";
	};
	foreach my $k ( keys %$map ){
		my $json = $enc->encode($map->{$k});
		print $h "$json\n";
	}
	close $h or do {
		die "close failed for $filename: $OS_ERROR, stopped";
	};
	return;
}

sub cmp_urlmap (\%\%) {
	my ($left, $right) = @_;
	my %c;
	my $enc = JSON->new->utf8->canonical;
	while( my ($k, $v) = each %$left ) { my $json = $enc->encode($v); $c{"$k,$json"} |= 1; }
	while( my ($k, $v) = each %$right ){ my $json = $enc->encode($v); $c{"$k,$json"} |= 2; }
	my @r;
	while( my ($i, $r) = each %c ){
		next if $r == 3;
		push @r, $i;
	}
	return @r;
}

sub read_all_series_cache () {
	my %cache;
	my $filename = "$CACHEDIR/naemon2influx-grafana-helper.all_series";
	open my $h, '<', "$filename" or do {
		#die "cannot open $filename: $OS_ERROR, stopped";
		return ();
	};
	while( <$h> ){
		chomp;
		$cache{$_} = 1;
	}
	close $h or do {
		die "close failed for $filename: $OS_ERROR, stopped";
	};
	return sort keys %cache;
}

sub write_all_series_cache (\@) {
	my ($cache) = @_;
	my $filename = "$CACHEDIR/naemon2influx-grafana-helper.all_series";
	open my $h, '>', "$filename" or do {
		die "cannot open $filename: $OS_ERROR, stopped";
	};
	foreach my $i ( @$cache ){
		print $h $i, "\n";
	}
	close $h or do {
		die "close failed for $filename: $OS_ERROR, stopped";
	};
	return;
}

sub cmp_all_series (\@\@) {
	my ($left, $right) = @_;
	my %c;
	foreach my $i ( @$left ) { $c{$i} |= 1; }
	foreach my $i ( @$right ){ $c{$i} |= 2; }
	my %d;
	while( my ($i, $r) = each %c ){
		next if $r == 3;
		my ($m, %tags) = series2measurementandtags ($i);
		my $j = $tags{hostname} . ',' . $m;
		$d{$j} = 1;
	}
	return sort keys %d;
}

sub service2measurement ($$) {
	my ($config, $service ) = @_;
	my $global_prefix = $config->{'global_prefix'};
	my $measurement = $global_prefix eq '' ? $service : "$global_prefix.$service";
	my $separator = $config->{'separator'};
	$measurement =~ s/ /$separator/g;
	my $trimpattern = $config->{'trimpattern'};
	$measurement =~ s/$trimpattern//g if $trimpattern;
	return $measurement;
}

sub series2measurementandtags ($) {
	my ($series) = @_;
	my ($measurement, @tags) = split ",", $series;
	my %tags;
	foreach my $tag ( @tags ){
		my ($k, $v) = split "=", $tag;
		$tags{$k} = $v;
	}
	return $measurement, %tags;
}

sub measurementandtags2series ($%) {
	my ($measurement, %tags) = @_;
	my $series = $measurement;
	foreach my $k ( sort keys %tags ){
		my $v = $tags{$k};
		$series .= ",$k=$v";
	}
	return $series;
}

sub query_to_influxdb ($$) {
	my ($config, $q ) = @_;
	my $ua = LWP::UserAgent->new;
	my $server_endpoint = sprintf '%s/query?db=%s&u=%s&p=%s&q=%s',
		$config->{'output'}, $config->{'database'},
		$config->{'username'}, $config->{'password'}, uri_escape $q;
	my $req = HTTP::Request->new('GET' => $server_endpoint);
	my $t = time;
	debuglog "influxdb-req %s", $q;
	my $res = $ua->request($req);
	debuglog "influxdb-res: %d sec", time - $t;
	return $res;
}

sub register_dashboard_to_grafana ($$$;$) {
	my ($config, $name, $json, $tags) = @_;
	my @tags_text;
	foreach( @$tags ){ push @tags_text, "\"$_\""; }
	my $tags_text = join ",", @tags_text;
	my $dashboardjson = << "	ENDOFJSON";
	{
	  "overwrite" : true,
	  "dashboard" : {
	    "id": null,
	    "title": "$name",
	    "tags": [$tags_text],
	    "timezone": "browser",
	    "editable": true,
	    "hideControls": false,
	    "sharedCrosshair": false,
	    "rows": $json,
	    "time": { "from": "now-1h", "to": "now" },
	    "timepicker": {
	      "refresh_intervals": [ "5m" ],
	      "time_options"     : [ "1h", "1d", "7d", "30d", "1y" ]
	    },
	    "templating":  { "list": [] },
	    "annotations": { "list": [] },
	    "schemaVersion": 8,
	    "version": 4,
	    "links": []
	  }
	}
	ENDOFJSON

	my $ua = LWP::UserAgent->new;
	my $url = $config->{GRAFANAURL} . "/api/dashboards/db";
	my $header = [
        	'Authorization' => 'Bearer ' . $config->{GRAFANAAPIKEY},
		'Content-Type'  => 'application/json',
	];
	my $req = HTTP::Request->new('POST', $url, $header, $dashboardjson);
	debuglog "grafana-req %s", $url;
	my $res = $ua->request($req);
	debuglog "grafana-res code=%s", $res->code;
	if( $res->code != 200 ){
		return undef;
	}
	my $r = decode_json $res->content;
	debuglog "grafana-res status=%s", $r->{status};
	if( $r->{status} ne "success" ){
		return undef;
	}
	return $r;
}

sub read_all_series_from_influxdb ($) {
	my ($n2iconf) = @_;
	my $q = "show series";
	my $res = query_to_influxdb $n2iconf, $q;
	unless ($res->is_success) {
		printf "query: %s\n", $q;
		printf "code: %s\nmessage: %s\n", $res->code, $res->message;
		return ();
	}

	my $json = decode_json $res->decoded_content;
	my $series = $json->{'results'}->[0]->{'series'}->[0]->{'values'};
	my %series;
	my $global_prefix = $n2iconf->{global_prefix} . ".";
	my $global_prefix_length = length $global_prefix;
	foreach my $i ( @$series ){
		my $s = $i->[0];
		my ($m, %tags) = series2measurementandtags $s;
		if( $global_prefix ){
			next unless substr($m, 0, $global_prefix_length) eq $global_prefix;
			$m = substr($m, $global_prefix_length);
		}
		foreach my $hiddentag ( 'state' ){
			delete $tags{$hiddentag};
		}
		$s = measurementandtags2series $m, %tags;
		$series{$s} = 1;
	}
	return sort keys %series;
}

sub read_tags_from_influxdb ($$$) {
	my ($config, $measurement, $hostname ) = @_;
	my $q = "show series from \"$measurement\"";
	my $res = query_to_influxdb $config, $q;
	unless ($res->is_success) {
		printf "query: %s\n", $q;
		printf "code: %s\nmessage: %s\n", $res->code, $res->message;
	}

	my $json = decode_json $res->decoded_content;
	my $series = $json->{'results'}->[0]->{'series'}->[0]->{'values'};
	my %series;
	foreach my $i ( @$series ){
		my $s = $i->[0];
		my ($m, %tags) = series2measurementandtags $s;
		next unless $tags{'hostname'} eq $hostname;
		foreach my $hiddentag ( 'state' ){
			delete $tags{$hiddentag};
		}
		$s = measurementandtags2series $m, %tags;
		$series{$s} = \%tags;
	}
	return values %series;
}

sub read_fieldkeys_from_influxdb ($$) {
	my ($config, $measurement ) = @_;
	my $q = "show field keys from \"$measurement\"";
	my $res = query_to_influxdb $config, $q;
	if ($res->is_success) {
		my $json = decode_json $res->decoded_content;
		my $series = $json->{'results'}->[0]->{'series'}->[0]->{'values'};
		my @fieldkeys;
		foreach my $i ( @$series ){
			next unless $i->[1] eq 'float';
			push @fieldkeys, $i->[0];
		}
		return @fieldkeys;
	}
	else {
		printf "query: %s\n", $q;
		printf "code: %s\nmessage: %s\n", $res->code, $res->message;
	}
}

sub read_fieldlastvalues_from_influxdb ($$) {
#	my ($config, $service ) = @_;
#	my $measurement = service2measurement %$config, $service;
#	my $q = "show field keys from \"$measurement\"";
#	my $res = query_to_influxdb %$config, $q;
#	if ($res->is_success) {
#		my $h = decode_json $res->decoded_content;
#		my $json = decode_json $res->decoded_content;
#		my $series = $json->{'results'}->[0]->{'series'}->[0]->{'values'};
#		my @fieldkeys;
#		foreach my $i ( @$series ){
#			next unless $i->[1] eq 'float';
#			push @fieldkeys, $i->[0];
#		}
#		return @fieldkeys;
#	}
#	else {
#		printf "query: %s\n", $q;
#		printf "code: %s\nmessage: %s\n", $res->code, $res->message;
#	}
}

sub expand_matches ($\%\@) {
	my ($text, $params, $matches) = @_;
	$text =~ s{
		\$ (?: (\d+) | \{(\d+)\} | (\w+) | \$\{(\w+)\} )
	}{
		my $n;
		if   ( $1 ne '' ){ $matches->[$1]; }
		elsif( $2 ne '' ){ $matches->[$2]; }
		elsif( $3 ne '' ){ $params->{$3}; }
		elsif( $4 ne '' ){ $params->{$4}; }
	}egx;
	return $text;
}

sub tmplfunc_match {
	my ($text, $re) = @_;
	if( $text =~ m"$re" ){ return 1; }
	else                 { return undef; }
}

sub tmplfunc_sub {
	my ($text, $re, $replace) = @_;
	$text =~ s/$re/$replace/;
	return $text;
}

sub tmplfunc_gsub {
	my ($text, $re, $replace) = @_;
	$text =~ s/$re/$replace/g;
	return $text;
}

sub tmplfunc_split {
	my ($text, $re) = @_;
	return split m"$re", $text;
}

our $SERIAL = 1;
sub tmplfunc_serial {
	return $SERIAL++;
}

sub expand_params ($$) {
	my ($text, $params) = @_;

	my $tt = Template->new({}) or do {
		debuglog '    cannot generate Template instance: ' . $Template::ERROR;
		return $text;
	};
        my $vars = {
		match	=> \&tmplfunc_match,
		sub	=> \&tmplfunc_sub,
		gsub	=> \&tmplfunc_gsub,
		split	=> \&tmplfunc_split,
		serial	=> \&tmplfunc_serial,
		%$params
        };

	my $output;
        $tt->process( \$text, $vars, \$output ) or do {
		debuglog '    cannot process template: ' . $tt->error();
		return $text;
	};
	return $output;
}

####

sub generate_panelsseed (\@$\@) {
	my ($rules, $measurement, $tagsandkeys) = @_;
	my %srcs;
	my $autoid = 'id0000';
	foreach my $tags_fieldkeys ( @$tagsandkeys ){
		my $tags = $tags_fieldkeys->[0];
		my $fieldkeys = $tags_fieldkeys->[1];
		my $performancenames = $tags_fieldkeys->[2];
		my $series = measurementandtags2series $measurement, %$tags;
		##
		my @tags_text;
		my @tags_json;
		my @tags_where;
		foreach my $k ( sort keys %$tags ){
			my $v = $tags->{$k};
			push @tags_text, "$k=$v" unless $k eq 'hostname';
			push @tags_json, "{\"key\":\"$k\",\"operator\":\"=\",\"value\":\"$v\"}";
			push @tags_where, "\\\"$k\\\" = '$v'";
		}
		my $tags_text = join ',', @tags_text;
		my $tags_json = '[' . join( ',', @tags_json ) . ']';
		my $tags_where = join ' and ', @tags_where, '$timeFilter';
		##
		for( my $j = 0; $j < @$fieldkeys; $j++ ){
			my $fieldkey = $fieldkeys->[$j];
			my $performancename = $performancenames->[$j];
			my $template;
			my $graphid;
			my %params;

			foreach my $rule ( @$rules ){
				my $series_re = $rule->[0];
				my @m1 = $series =~ m"$series_re";
				next unless @m1;
				shift @m1 if $#+ == 0;

				my $field_re = $rule->[1];
				my @m2 = $fieldkey =~ m"$field_re";
				next unless @m2;
				shift @m2 if $#+ == 0;

				$template = $rule->[2];
				if( $template eq 'IGNORE' ){
					$graphid = undef;
					next;
				}
				my @m = ($fieldkey, @m1, @m2);

				my %p = (
					'fieldkey'    => $fieldkey,
					'series'      => $series,
					'measurement' => $measurement,
					'tags'        => $tags_json,
					'tags_text'   => $tags_text,
					'tags_json'   => $tags_json,
					'tags_where'  => $tags_where,
				);

				$graphid = expand_matches $rule->[3], %p, @m;

				foreach my $i ( split m"\s+", $rule->[4] ){
					die "$i, stopped" unless $i =~ m"^(\w+)=(.*)$";
					my $k = $1;
					my $v = $2;
					$params{$k} = expand_matches $v, %p, @m;
				}
			}

			$graphid = '' if $template eq 'IGNORE';

			if( $graphid eq 'NEW' ){
				$graphid = $autoid;
				$autoid++;
			}
			unless( exists $srcs{$graphid} ){
				$srcs{$graphid} = {
					'template' => undef,
					'params' => {},
					'keys' => []
				};
			}
			my $s = $srcs{$graphid};
			push @{$s->{'fieldkeys'}}, "$series $fieldkey";
			push @{$s->{'performancenames'}}, $performancename;
			$s->{'template'} = $template;
			$s->{'params'}->{'fieldkey'} = $fieldkey;
			$s->{'params'}->{'series'} = $series;
			$s->{'params'}->{'measurement'} = $measurement;
			$s->{'params'}->{'tags'} = $tags_json;
			$s->{'params'}->{'tags_text'} = $tags_text;
			$s->{'params'}->{'tags_json'} = $tags_json;
			$s->{'params'}->{'tags_where'} = $tags_where;
			$s->{'params'}->{'graphid'}  = $graphid;
			while( my ($k, $v) = each %params ){
				$s->{'params'}->{$k} = $v;
			}
		}
	}
	return %srcs;
}

sub debuglog_panelsseed (%) {
	my (%seed) = @_;
	my @graphids = sort keys %seed;
	#debuglog '	fieldkeys: %s', join(' ', @keys);
	#debuglog '	series   : %s', join(' ', @series);
	debuglog '	graphids : %s', join(' ', @graphids);

	foreach my $graphid ( @graphids ){
		my $template = $seed{$graphid}->{template};
		next if $template eq 'IGNORE';
		debuglog "graphid=%s template=%s", $graphid, $template;
		my $performancenames = $seed{$graphid}->{performancenames};
		my $fieldkeys = $seed{$graphid}->{fieldkeys};
		for( my $i = 0; $i < @$fieldkeys; $i++ ){
			debuglog "	performancename:%s, fieldkey:%s",
				$performancenames->[$i], $fieldkeys->[$i];
		}
	}

}

sub panelsseed2panelsobjlist (\%\%) {
	my ($seeds, $additional_params) = @_;
	my @rows;
	my %panelid2info;
	foreach my $id ( sort keys %$seeds ){
		my $seed = $seeds->{$id};
		my $templatename = $seed->{template};
		next if $templatename eq 'IGNORE';

		my %params = %{$seed->{params}};
		while( my ($k, $v) = each %$additional_params ){
			$params{$k} = $v;
		}
		my $template_json = read_template $templatename;
		my $json = expand_params $template_json, \%params;

		my $obj;
		eval { $obj = decode_json "[ $json ]"; };
		if( $@ ){
			debuglog "$@";
			debuglog "decoding json: $json";
			die "$templatename: cannot validate, stopped";
		}

		my $performancenames = $seed->{performancenames};
		foreach my $row ( @$obj ){
			my $panels = $row->{panels};
			unless( $panels ){
				die "json has no panel, stopped";
			}
			foreach my $panel ( @$panels ){
				my $panel_id = $panel->{id};
				next unless $panel_id;
				my $title = $panel->{title};
				next unless $title;
				$panelid2info{$panel_id} = {
					'title' => $title,
					'id' => $id,
					'performancenames' => $performancenames,
				};
			}
		}

		push @rows, @$obj;
	}
	return \@rows, \%panelid2info;
}

sub generate_tagsandkeys (\@\@) {
	my ($tagslist, $fieldkeys) = @_;

	my %tagname;
	foreach my $tags ( @$tagslist ){
		while( my ($tagname, $v) = each %$tags ){
			next if $tagname eq 'hostname';
			$tagname{$tagname} = 1;
		}
	}

	my %fieldkey2tagname;
	foreach my $fieldkey ( @$fieldkeys ){
		next if $fieldkey =~ m"\.\w+$";
		foreach my $tagname_candidated ( split m"_+", $fieldkey ){
			next unless $tagname{$tagname_candidated};
			$fieldkey2tagname{$fieldkey}->{$tagname_candidated} = 1;
		}
	}

	my @fieldkeyslist;
	my @performancenameslist;

	foreach my $fieldkey ( @$fieldkeys ){
		my @expected_tagnames = sort (
			'hostname',
			keys %{$fieldkey2tagname{$fieldkey}}
		);
		for( my $i = 0; $i < @$tagslist; $i++ ){
			my $tags = $tagslist->[$i];
			my @tagnames = sort keys %$tags;
			next unless "@expected_tagnames" eq "@tagnames";

			my @words;
			foreach my $word ( split m"_", $fieldkey ){
				if( $tagname{$word} ){
					my $tagvalue = $tags->{$word};
					push @words, "${word}[$tagvalue]";
				}else{
					push @words, $word;
				}
			}
			my $performancename = join '_', @words;

			push @{$fieldkeyslist[$i]}, $fieldkey;
			push @{$performancenameslist[$i]}, $performancename;
		}
	}

	my @tagsandkeys;
	for( my $i = 0; $i < @$tagslist; $i++ ){
		push @tagsandkeys, [
			$tagslist->[$i],
			$fieldkeyslist[$i],
			$performancenameslist[$i]
		];
	}

	return @tagsandkeys;
}

sub generate_panelsobjlist ($$$$$) {
	my ($n2iconf, $rules, $hostname, $servicedesc, $grafanadatasource) = @_;
	my $measurement = service2measurement $n2iconf, $servicedesc;
	my %additional_params = (
		'hostname' => $hostname,
		'servicedesc' => $servicedesc,
		'measurement' => $measurement,
		'GRAFANADATASOURCE' => $grafanadatasource,
	);
	my @keys = read_fieldkeys_from_influxdb $n2iconf, $measurement; 
	my @tagslist = read_tags_from_influxdb $n2iconf, $measurement, $hostname; 

	my @tagsandkeys = generate_tagsandkeys @tagslist, @keys;

	my %seed = generate_panelsseed @$rules, $measurement, @tagsandkeys;
	debuglog_panelsseed %seed;
	my ($objlist, $panelid2info) = panelsseed2panelsobjlist
		%seed, %additional_params;
	return $objlist, $panelid2info;
}

####
sub cmd_cron ($$$) {
	my ($conf, $n2iconf, $rules) = @_;
	my $grafanadatasource = $conf->{'GRAFANADATASOURCE'};
	my @last_series = read_all_series_cache; 
	my @curr_series = read_all_series_from_influxdb $n2iconf; 
	my %last_map = read_urlmap; 
	my %curr_map = %last_map;
	my @series_diff = cmp_all_series @curr_series, @last_series;
	if( @series_diff ){
		foreach my $diff ( @series_diff ){
			my ($host, $service) = split m",", $diff;
			my ($objlist, $id2info) = generate_panelsobjlist
				$n2iconf, $rules, $host, $service, $grafanadatasource;
			my $json = encode_json $objlist;
			my @tags = ($host, $service);
			my $r = register_dashboard_to_grafana $conf, "$host, $service", $json, \@tags;
			$curr_map{"$host,$service"} = {
				'host_service' => $diff,
				'host'    => $host,
				'service' => $service,
				'dashboard_uid'  => $r->{uid},
				'dashboard_slug' => $r->{slug},
				'dashboard_id'   => $r->{id},
				'panels'  => $id2info,
			};
		}
		write_all_series_cache @curr_series;
	}
	my @map_diff = cmp_urlmap %curr_map, %last_map;
	if( @map_diff ){
		write_urlmap %curr_map;
	}
}

sub action_rows ($$$$$) {
	my ($conf, $n2iconf, $rules, $conn, $req) = @_;
	my $grafanadatasource = $conf->{'GRAFANADATASOURCE'};
	my $query = URI::Query->new( $conn->get_request->uri->query );
	my %query = $query->hash;

	my $callback    = $query{'callback'} // 'callback_from_helper';
	my $hostname    = $query{'hostname'};
	my $servicedesc = $query{'servicedesc'};
	unless( $callback =~ m"^\w{1,80}$") {
		$conn->send_error(RC_FORBIDDEN);
		return;
	}
	unless( $hostname =~ m"^\S{1,80}$" && $hostname !~ m"[=,;]" ) {
		$conn->send_error(RC_FORBIDDEN);
		return;
	}
	unless( $servicedesc =~ m"^\S{1,80}$" && $servicedesc !~ m"[=,;]" ) {
		$conn->send_error(RC_FORBIDDEN);
		return;
	}

	my ($objlist, $infolist) = generate_panelsobjlist
		$n2iconf, $rules, $hostname, $servicedesc, $grafanadatasource;
	my $json = encode_json $objlist;

	my $res = HTTP::Response->new;
	$res->code(200);
	$res->header('Content-Type' => 'text/javascript');
	$res->content("$callback($json);");
	$conn->send_response($res);
}

sub make_dashboard_url ($$) {
	my ($conf, $dashboard_info) = @_;
	my $dashboard_url = $conf->{GRAFANAURL};
	$dashboard_url =~ s{/$}{};
	$dashboard_url .= sprintf "/d/%s/%s", $dashboard_info->{dashboard_uid}, $dashboard_info->{dashboard_slug};
	$dashboard_url .= "?orgId=" . $conf->{GRAFANAORGID} if $conf->{GRAFANAORGID};
	return $dashboard_url;
}

sub make_panel_url ($$$) {
	my ($conf, $dashboard_info, $panel_info) = @_;
	my $panel_url = $conf->{GRAFANAURL};
	$panel_url =~ s{/$}{};
	$panel_url .= sprintf "/render/d-solo/%s/%s?panelId=%d&width=600&height=200&timeout=5",
		$dashboard_info->{dashboard_uid}, $dashboard_info->{dashboard_slug},
		$panel_info->{id};
	$panel_url .= "&orgId=" . $conf->{GRAFANAORGID} if $conf->{GRAFANAORGID};
	return $panel_url;
}

sub action_redirect ($$$$$) {
	my ($conf, $n2iconf, $rules, $conn, $req) = @_;
	my $query = URI::Query->new( $req->uri->query );
	my %query = $query->hash;

	my $dashboard_info = search_urlmap $query{hostname}, $query{servicedesc};
	unless( defined $dashboard_info ){
		$conn->send_error(RC_FORBIDDEN);
		return;
	}

	my $dashboard_url = make_dashboard_url $conf, $dashboard_info;
	accesslog "redirect: host=%s, service=%s -> url=%s",
		$query{hostname}, $query{servicedesc}, $dashboard_url;
	my $res = HTTP::Response->new;
	$res->code(307);
	$res->header('Location' => $dashboard_url);
	$conn->send_response($res);
}

sub action_dashboard_info ($$$$$) {
	my ($conf, $n2iconf, $rules, $conn, $req) = @_;
	my $query = URI::Query->new( $req->uri->query );
	my %query = $query->hash;

	my $dashboard_info = search_urlmap $query{hostname}, $query{servicedesc};
	unless( defined $dashboard_info ){
		$conn->send_error(RC_FORBIDDEN);
		return;
	}
	my $panels_info = $dashboard_info->{panels} // {};

	my $dashboard_url = make_dashboard_url $conf, $dashboard_info;
	while( my ($panel_id, $panel_info) = each %$panels_info ){
		my $panel_url = make_panel_url $conf, $dashboard_info, $panel_info;
		$panel_info->{url} = $panel_url;
	}

	my $obj = {
		"dashboard_url" => $dashboard_url,
		"dashboard_id"  => $dashboard_info->{dashboard_id},
		"panels" => [ values %$panels_info ],
	};
	my $enc = JSON->new->pretty;
	my $json = $enc->encode($obj);

	my $res = HTTP::Response->new;
	$res->code(200);
	$res->header('Content-Type' => 'text/javascript');
	$res->content($json);
	$conn->send_response($res);
}

sub cmd_daemon ($$$) {
	my ($conf, $n2iconf, $rules) = @_;

	$0 = $NAME;
	my $dashboard_tmpl = read_template "naemon2influx-grafana-helper";
	my $dashboard_js = expand_params $dashboard_tmpl, $conf;
	write_js "naemon2influx-grafana-helper", $dashboard_js;
	my $d = HTTP::Daemon->new(
		'Reuse' => 1,
		'LocalAddr' => $conf->{'LISTENADDR'},
		'LocalPort' => $conf->{'LISTENPORT'}
	) or do {
		die sprintf 'cannot listen %s:%d: %s, stopped', $conf->{'LISTENADDR'}, $conf->{'LISTENPORT'}, $OS_ERROR;
	};

	$SIG{'TERM'} = sub {
		$d->shutdown;
	};
	$SIG{'HUP'} = sub {
		if( open $LOGFH, '>>', $LOGFILE ){ $LOGFH->autoflush; }
		else{ $LOGFH = *STDERR; }
	};

	while (my $conn = $d->accept) {
		my $req = $conn->get_request;
		next unless $req;
		my $method = $req->method;
		my $path = uri_unescape $req->uri->path;
		accesslog 'req: method=%s path=%s', $method, $path;
		if    ($method eq 'GET' && $path eq "/rows.js" ){
			action_rows           $conf, $n2iconf, $rules, $conn, $req;
		}elsif($method eq 'GET' && $path eq "/dashboard_info.js" ){
			action_dashboard_info $conf, $n2iconf, $rules, $conn, $req;
		}elsif($method eq 'GET' && $path eq "/redirect.html" ){
			action_redirect       $conf, $n2iconf, $rules, $conn, $req;
		}else{
			$conn->send_error(RC_FORBIDDEN);
		}
		$conn->close;
		undef $conn;
	}
}

####
my $conf    = read_helper_conf;
my $rules   = read_helper_rules; 
my $n2iconf = read_naemon2influx_cfg;
$DEBUG = $conf->{DEBUG};

####
if    ( $ARGV[0] eq "daemon" ){
	cmd_daemon $conf, $n2iconf, $rules;
	exit 0;
}elsif( $ARGV[0] eq "cron" ){
	cmd_cron $conf, $n2iconf, $rules;
	exit 0;
}else{
	print "usage: % $0 {daemon|cron}\n";
	exit 0;
}

####
=pod

=encoding utf8

=head1 NAME

naemon2influx-grafana-helper

=head1 SYNOPSIS

naemon2influx-grafana-helper

=head1 DESCRIPTION

naemon2influx-grafana-helper generates Grafana panel JSONP for scripted
dashboard from InfluxDB tags and series.

This helper works as HTTP daemon. This helper is requested with hostname
and servicedesc, and responses JSONP.

=head1 OPTIONS

=over 8

Nothing to do.

=back

=head1 ENVIRONMENT

=over 8

=item DEBUG

F</etc/naemon/naemon2influx.cfg>

=back

=head1 FILES

=over 8

=item F</etc/naemon/naemon2influx-grafana-helper.conf>

=item F</etc/naemon/naemon2influx-grafana-helper.rules>

=item F</etc/naemon/naemon2influx-grafana-helper.d/*.tt>

=back

=head1 AUTHOR

SASAJIMA Toshihiro

=head1 SEE ALSO

L<naemon2influx-grafana-helper.conf(5)>

